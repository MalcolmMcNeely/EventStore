// <auto-generated />
using System;
using EventStore.EFCore.Postgres.Database;
using EventStore.EFCore.Postgres.Events.Transport;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventStore.SampleApp.EFCore.Postgres.Migrations
{
    [DbContext(typeof(EventStoreDbContext))]
    [Migration("20250804191023_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventStore.EFCore.Postgres.Events.Cursors.EventCursorEntity", b =>
                {
                    b.Property<string>("CursorName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("LastSeenEvent")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CursorName");

                    b.ToTable("EventCursorEntities");
                });

            modelBuilder.Entity("EventStore.EFCore.Postgres.Events.Streams.EventStreamEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("RowKey")
                        .HasColumnType("integer");

                    b.Property<Envelope>("Envelope")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Key", "RowKey");

                    b.HasIndex("Key", "RowKey")
                        .IsUnique();

                    b.ToTable("EventStreams");
                });

            modelBuilder.Entity("EventStore.EFCore.Postgres.Events.Transport.QueuedEventEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DequeueCount")
                        .HasColumnType("integer");

                    b.Property<Envelope>("Envelope")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("QueuedEvents");
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.TrafficLights.AggregateRoots.TrafficLight", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("RowVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TrafficLights", (string)null);
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.TrafficLights.Projections.TrafficLightProjection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Colour")
                        .HasColumnType("integer");

                    b.Property<int>("RowVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TrafficLightProjections", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
