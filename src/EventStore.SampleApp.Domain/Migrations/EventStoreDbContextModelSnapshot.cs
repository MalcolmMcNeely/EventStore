// <auto-generated />
using System;
using System.Collections.Generic;
using EventStore.EFCore.Postgres.Database;
using EventStore.EFCore.Postgres.Events.Transport;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventStore.SampleApp.Domain.Migrations
{
    [DbContext(typeof(EventStoreDbContext))]
    partial class EventStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventStore.EFCore.Postgres.Commands.CommandEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("RowKey")
                        .HasColumnType("integer");

                    b.Property<string>("CausationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CommandType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Key", "RowKey");

                    b.HasIndex("Key", "RowKey")
                        .IsUnique();

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("EventStore.EFCore.Postgres.Events.Cursors.EventCursorEntity", b =>
                {
                    b.Property<string>("CursorName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("LastSeenEvent")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CursorName");

                    b.ToTable("EventCursorEntities");
                });

            modelBuilder.Entity("EventStore.EFCore.Postgres.Events.EventStreamEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("RowKey")
                        .HasColumnType("integer");

                    b.Property<string>("CausationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Envelope>("Envelope")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Key", "RowKey");

                    b.HasIndex("Key", "RowKey")
                        .IsUnique();

                    b.ToTable("EventStreams");
                });

            modelBuilder.Entity("EventStore.EFCore.Postgres.Events.Transport.QueuedEventEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DequeueCount")
                        .HasColumnType("integer");

                    b.Property<Envelope>("Envelope")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("QueuedEvents");
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.Accounts.AggregateRoots.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("RowVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.Accounts.Projections.Projection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("RowVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Projections", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.TrafficLights.AggregateRoots.TrafficLight", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("RowVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TrafficLights", (string)null);
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.TrafficLights.Projections.TrafficLightProjection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Colour")
                        .HasColumnType("integer");

                    b.Property<int>("RowVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TrafficLightProjections", (string)null);
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.Accounts.Projections.IndividualAccountProjection", b =>
                {
                    b.HasBaseType("EventStore.SampleApp.Domain.Accounts.Projections.Projection");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("IndividualAccountProjections", (string)null);
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.Accounts.Projections.TotalBusinessAccountProjection", b =>
                {
                    b.HasBaseType("EventStore.SampleApp.Domain.Accounts.Projections.Projection");

                    b.PrimitiveCollection<List<string>>("Accounts")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.ToTable("TotalBusinessAccountProjections", (string)null);
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.Accounts.Projections.IndividualAccountProjection", b =>
                {
                    b.HasOne("EventStore.SampleApp.Domain.Accounts.Projections.Projection", null)
                        .WithOne()
                        .HasForeignKey("EventStore.SampleApp.Domain.Accounts.Projections.IndividualAccountProjection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventStore.SampleApp.Domain.Accounts.Projections.TotalBusinessAccountProjection", b =>
                {
                    b.HasOne("EventStore.SampleApp.Domain.Accounts.Projections.Projection", null)
                        .WithOne()
                        .HasForeignKey("EventStore.SampleApp.Domain.Accounts.Projections.TotalBusinessAccountProjection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
