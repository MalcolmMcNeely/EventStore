@page "/Accounts"
@using EventStore.Blazor.EFCore.Postgres.Features.Accounts
@using EventStore.Commands.Dispatching
@using EventStore.Projections
@using EventStore.SampleApp.Domain.Accounts
@using EventStore.SampleApp.Domain.Accounts.Commands
@using EventStore.SampleApp.Domain.Accounts.Projections
@inject IProjectionRepository<IndividualAccountProjection> IndividualAccountRepository
@inject IProjectionRepository<TotalBusinessAccountProjection> TotalBusinessAccountRepository
@inject ICommandDispatcher CommandDispatcher

<br/>

<MudPaper Outlined="true" Width="600px">
    <MudStack>
        <MudStack Row="true">
            <MudTextField @bind-Value="NewAccountName" Label="New Account Name" Variant="Variant.Filled"/>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(TotalBusinessAccount.Accounts.Contains(NewAccountName))"
                       OnClick="@OpenAccountAsync">
                Open Account
            </MudButton>
            <MudSpacer/>
        </MudStack>

        <MudStack Row="true">
            <MudSelect @bind-Value="@CloseAccountName"
                       Label="Select account to close"
                       Placeholder="Please Select">
                @foreach (var account in TotalBusinessAccount.Accounts)
                {
                    <MudSelectItem Value="@account">@account</MudSelectItem>
                }
            </MudSelect>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(!TotalBusinessAccount.Accounts.Contains(CloseAccountName))"
                       OnClick="@CloseAccountAsync">
                Close Account
            </MudButton>
            <MudSpacer/>
        </MudStack>

        <MudStack Row="true">
            <MudText Typo="Typo.button">Total Business Balance</MudText>
            <MudNumericField @bind-Value="@TotalBusinessAccount.Balance"
                             ReadOnly="true"
                             HideSpinButtons="true"
                             Variant="Variant.Text"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.AttachMoney"/>
            <MudSpacer/>
        </MudStack>
    </MudStack>
</MudPaper>

<br/>

<MudStack Row="true" Wrap="Wrap.Wrap">
    @foreach (var account in IndividualAccounts)
    {
        <MudDivider Vertical="true"/>
        <AccountToolbar AccountName="@account.Name" OnChanged="OnAccountChanged"/>
    }
    
    <MudDivider Vertical="true"/>
</MudStack>

@code {
    string NewAccountName { get; set; }
    string CloseAccountName { get; set; }

    public TotalBusinessAccountProjection TotalBusinessAccount { get; set; } = new();
    public List<IndividualAccountProjection> IndividualAccounts { get; } = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TotalBusinessAccount = await TotalBusinessAccountRepository.LoadAsync(nameof(TotalBusinessAccountProjection));

            foreach (var accountName in TotalBusinessAccount.Accounts)
            {
                IndividualAccounts.Add(await IndividualAccountRepository.LoadAsync(accountName));
            }

            StateHasChanged();
        }
    }

    void OnAccountChanged(AccountChangedEventArgs eventArgs)
    {
        IndividualAccounts.FirstOrDefault(x => x.Name.Equals(eventArgs.AccountName))!.Balance += eventArgs.Adjustment;
        TotalBusinessAccount.Balance += eventArgs.Adjustment;
    }

    async Task OpenAccountAsync()
    {
        IndividualAccounts.Add(new IndividualAccountProjection { Name = NewAccountName });
        TotalBusinessAccount.Accounts.Add(NewAccountName);

        await CommandDispatcher.DispatchAsync(new OpenAccount { AccountName = NewAccountName, Type = AccountType.Asset, User = "user" });
    }

    async Task CloseAccountAsync()
    {
        IndividualAccounts.RemoveAll(x => x.Name.Equals(CloseAccountName));
        TotalBusinessAccount.Accounts.Remove(CloseAccountName);

        await CommandDispatcher.DispatchAsync(new CloseAccount { AccountName = CloseAccountName, User = "user" });
    }

}