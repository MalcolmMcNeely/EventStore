@page "/"
@implements IDisposable
@using EventStore.Blazor.EFCore.Postgres.Components.Controls
@using EventStore.Blazor.EFCore.Postgres.Models

<PageTitle>Home</PageTitle>

<CascadingValue Value="@Events" Name="CEvents">
    <EventStoreTable Stream="$all" @ref="Table1"/>
    <EventStoreTable Stream="$report" @ref="Table2"/>
</CascadingValue>

@code {
    readonly CancellationTokenSource _cancellationTokenSource = new();
    List<EventModel> Events { get; set; } = new();
    EventStoreTable? Table1 { get; set; }
    EventStoreTable? Table2 { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Task.Run(() => StartPollingAsync(_cancellationTokenSource.Token));
        }
    }

    async Task StartPollingAsync(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            var count = Events.Count;
            var newEvent = new EventModel(count, "$all", DateTime.UtcNow.AddMinutes(count), "DummyEvent", $"{{ Data = {count} }}");
            Events.Add(newEvent);
            var newEvent2 = new EventModel(count, "$report", DateTime.UtcNow.AddMinutes(count), "DummyEvent", $"{{ Data = {count} }}");
            Events.Add(newEvent2);

            await InvokeAsync(async () =>
            {
                StateHasChanged();
                await Table1?.ScrollToBottomAsync()!;
                await Table2?.ScrollToBottomAsync()!;
            });

            await Task.Delay(1000, token);
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
}