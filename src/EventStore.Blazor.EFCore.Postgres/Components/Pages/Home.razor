@page "/"
@inherits EventStore.Blazor.EFCore.Postgres.Components.BaseControls.PollingComponentBase
@using EventStore.Blazor.EFCore.Postgres.Components.Controls
@using EventStore.Blazor.EFCore.Postgres.Services.Events
@using EventStore.EFCore.Postgres.Events
@inject IEventService EventService

<PageTitle>Dashboard</PageTitle>

<MudSpacer/>
<TrafficLightStatus/>
<MudSpacer/>

<MudPaper Outlined="true">
    <CascadingValue Value="@Events" Name="CEvents">
        <MudStack Row="true" Wrap="Wrap.Wrap" AlignItems="AlignItems.Start">
            <EventStoreTable Stream="$All" @ref="AllStreamTable"/>
            <EventStoreTable Stream="projection-TrafficLightProjection" @ref="ProjectionTable"/>
            <CommandTable/>
        </MudStack>
    </CascadingValue>
</MudPaper>

@code {
    List<EventStreamEntity> Events { get; set; } = new();
    EventStoreTable? AllStreamTable { get; set; }
    EventStoreTable? ProjectionTable { get; set; }

    protected override async Task StartPollingAsync(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            var (hasNewEvents, newEvents) = await EventService.GetEventsSince(LastPoll, token).ConfigureAwait(false);

            LastPoll = newEvents.LastOrDefault()?.TimeStamp ?? LastPoll;

            if (hasNewEvents)
            {
                Events.AddRange(newEvents);

                await InvokeAsync(async () =>
                {
                    StateHasChanged();
                    await AllStreamTable?.ScrollToBottomAsync()!;
                    await ProjectionTable?.ScrollToBottomAsync()!;
                });
            }

            await Task.Delay(1000, token);
        }
    }

}