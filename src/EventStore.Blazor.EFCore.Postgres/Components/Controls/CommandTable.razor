@inherits EventStore.Blazor.EFCore.Postgres.Components.BaseControls.PollingComponentBase
@using EventStore.Blazor.EFCore.Postgres.Services.Commands
@using EventStore.EFCore.Postgres.Commands
@inject IJSRuntime Js
@inject ICommandService CommandService

<div>
    <MudStack>
        <MudText Typo="Typo.h6">@TableName</MudText>
        <MudDivider/>
        <MudTable id="@_containerId"
                  Items="@Commands"
                  Dense="true"
                  FixedHeader="true">
            <HeaderContent>
                <MudTh>RowKey</MudTh>
                <MudTh>Time</MudTh>
                <MudTh>CommandType</MudTh>
                <MudTh>Content</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="RowKey">@context.RowKey</MudTd>
                <MudTd DataLabel="Time">@context.TimeStamp</MudTd>
                <MudTd DataLabel="CommandType">@context.CommandType</MudTd>
                <MudTd DataLabel="Content">@context.Content</MudTd>
            </RowTemplate>
        </MudTable>
        <MudDivider/>
        <MudStack Row="true" StretchItems="StretchItems.All">
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward"OnClick="ScrollToBottomAsync">
                Scroll to bottom
            </MudButton>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowUpward" OnClick="ScrollToTopAsync">
                Scroll to top
            </MudButton>
        </MudStack>
    </MudStack>
</div>

<script>
    window.scrollToBottom = (elementId) => {
        let elem = document.getElementById(elementId);
        if (elem) {
            elem.scrollTop = elem.scrollHeight;
        }
    };

    window.scrollToTop = (elementId) => {
        let elem = document.getElementById(elementId);
        if (elem) {
            elem.scrollTop = 0;
        }
    };
</script>

@code {

    [Parameter] public required string TableName { get; set; }

    readonly string _containerId = $"commandTable{Guid.NewGuid():N}";

    List<CommandEntity> Commands { get; set; } = new();

    async Task ScrollToBottomAsync()
    {
        await Js.InvokeVoidAsync("scrollToBottom", _containerId);
    }

    async Task ScrollToTopAsync()
    {
        await Js.InvokeVoidAsync("scrollToTop", _containerId);
    }

    protected override async Task StartPollingAsync(CancellationToken token)
    {
        while (!token.IsCancellationRequested)
        {
            var (hasNewCommands, newCommands) = await CommandService.GetCommandsSince(LastPoll, token).ConfigureAwait(false);

            LastPoll = newCommands.LastOrDefault()?.TimeStamp ?? LastPoll;

            if (hasNewCommands)
            {
                Commands.AddRange(newCommands);

                await InvokeAsync(async () =>
                {
                    StateHasChanged();
                    await ScrollToBottomAsync();
                });
            }

            await Task.Delay(1000, token);
        }
    }

}